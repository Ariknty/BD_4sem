--ex1,ex2--
SELECT AUDITORIUM.AUDITORIUM_TYPE,
max(AUDITORIUM_CAPACITY) [Максимльная вместимость],
count(*) [Общее количество аудиторий],
AVG(AUDITORIUM_CAPACITY) [Средняя вместимость],
sum(AUDITORIUM_CAPACITY) [Сумма],
min(AUDITORIUM_CAPACITY) [Минимальная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE
ON AUDITORIUM.AUDITORIUM_TYPE=AUDITORIUM_TYPE.AUDITORIUM_TYPE
GROUP BY AUDITORIUM.AUDITORIUM_TYPE

--ex3--
SELECT a.FACULTY, G.PROFESSION, G.IDGROUP,
round(avg(cast(NOTE AS float(4))), 2) AS [Средняя оценка]
FROM FACULTY a
JOIN GROUPS G ON a.FACULTY = G.FACULTY
JOIN STUDENT S ON G.IDGROUP = S.IDGROUP
JOIN PROGRESS P ON S.IDSTUDENT = P.IDSTUDENT
GROUP BY a.FACULTY, G.PROFESSION, G.YEAR_FIRST, G.IDGROUP
ORDER BY [Средняя оценка] desc

--ex4--
SELECT p1.NOTE, p1.SUBJECT,
(SELECT count(*) FROM PROGRESS p2
WHERE p1.SUBJECT=p2.SUBJECT and p1.NOTE=p2.NOTE) [Количество]
FROM PROGRESS p1
GROUP BY p1.SUBJECT, p1.NOTE
HAVING NOTE=8 or NOTE=9

--ex5--

SELECT f.FACULTY, g.PROFESSION, p.SUBJECT,
AVG(p.NOTE) [Средний_балл]
FROM FACULTY f
JOIN GROUPS g ON f.FACULTY = g.FACULTY
JOIN STUDENT s ON g.IDGROUP = s.IDGROUP
JOIN PROGRESS p ON s.IDSTUDENT = p.IDSTUDENT
WHERE f.FACULTY = 'ИДиП'
GROUP BY ROLLUP(f.FACULTY, g.PROFESSION, p.SUBJECT);

--ex6--

SELECT AUDITORIUM.AUDITORIUM_TYPE,
max(AUDITORIUM_CAPACITY) [Максимльная вместимость],
count(*) [Общее количество аудиторий],
AVG(AUDITORIUM_CAPACITY) [Средняя вместимость],
sum(AUDITORIUM_CAPACITY) [Сумма],
min(AUDITORIUM_CAPACITY) [Минимальная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE
ON AUDITORIUM.AUDITORIUM_TYPE=AUDITORIUM_TYPE.AUDITORIUM_TYPE
GROUP BY CUBE(AUDITORIUM.AUDITORIUM_TYPE)

--ex7--

SELECT GROUPS.PROFESSION, PROGRESS.SUBJECT, 
avg(PROGRESS.NOTE) [Средняя оценка]
FROM GROUPS join STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
			join PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = 'ТОВ'
GROUP BY GROUPS.PROFESSION, PROGRESS.SUBJECT
	UNION
SELECT GROUPS.PROFESSION, PROGRESS.SUBJECT, 
avg(PROGRESS.NOTE) [Средняя оценка]
FROM GROUPS join STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
			join PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = 'ХТиТ'
GROUP BY GROUPS.PROFESSION, PROGRESS.SUBJECT

SELECT FACULTY, PROFESSION, IDGROUP, avg_score
FROM
(
    SELECT FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP, 
	ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) AS avg_score
		FROM FACULTY
			JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
			JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
			JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
		WHERE FACULTY.FACULTY = 'ТОВ'
		GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP
    INTERSECT
    SELECT FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP, 
	ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) AS avg_score
		FROM FACULTY
			JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
			JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
			JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
		GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP
) AS intersection_result;

SELECT FACULTY, PROFESSION, IDGROUP, avg_score
FROM
(
    SELECT FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP, 
	ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) AS avg_score
		FROM FACULTY
			JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
			JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
			JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
		GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP
    EXCEPT
    SELECT FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP, 
	ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) AS avg_score
		FROM FACULTY
			JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
			JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
			JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
		WHERE FACULTY.FACULTY = 'ХТиТ'
		GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, GROUPS.IDGROUP
) AS exception_result;
